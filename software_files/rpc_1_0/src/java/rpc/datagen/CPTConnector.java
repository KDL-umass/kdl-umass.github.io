/**
 * Part of the open-source KDL Relational PC package
 * (see LICENSE for copyright and license information). * Created by IntelliJ IDEA.
 * User: btaylor
 * Date: Oct 7, 2009
 * Time: 2:23:40 PM
 */
package rpc.datagen;

import rpc.dataretrieval.Database;

import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.python.core.PyDictionary;
import org.apache.log4j.Logger;


/**
 * A CPTConnector will generate a list of entity IDs.  The connector takes a CPT where each entry
 * identifies the number of entity ids to generate.
 */
public class CPTConnector extends Connector {

    private static Logger log = Logger.getLogger(CPTConnector.class);

    private CPTParent cpt;

    /**
     * Construct a CPT connector object.
     * @param query the SQL query used to retrieve the set of all entity ids to connect to.
     * @param cpt the conditional probability table that determines the number of links to create based
     * on parent values.
     * @param withReplacement whether or not entities can be reused to connect to.
     */
    public CPTConnector(String query, CPTParent cpt, boolean withReplacement) {

        this.cpt = cpt;

        this.query = query;
        this.withReplacement = withReplacement;

        // init the random number generator for this object
        this.random = new Random();

        // get the list of ids as generated by the query
        this.resetIds();

    }

    /**
     * Jython overload: Construct a CPT connector object.
     * @param query the SQL query used to retrieve the set of all entity ids to connect to.
     * @param parentsToCPTs a Python dictionary specifying the conditional probability table
     * that determines the number of links to create based on parent values.
     * @param withReplacement whether or not entities can be reused to connect to.
     */
    public CPTConnector(String query, PyDictionary parentsToCPTs, boolean withReplacement) {
        this.cpt = new CPTParent(parentsToCPTs);

        this.query = query;
        this.withReplacement = withReplacement;

        // init the random number generator for this object
        this.random = new Random();
    }

    /**
     * Get the list of unique ids from the query.
     */
    private void getIds() {
        ResultSet results = Database.executeQuery(this.query);

        // convert this into a set
        try {
            results.beforeFirst();
            while(results.next()) {
                this.ids.add(results.getInt(1));
            }
        }
        catch (SQLException e) {
            log.error("Error while iterating through result set: " + e);
        }

    }

    /**
     * Reset the set of ids which the connector uses to sample from.
     */
    public void resetIds() {
        // clear the current set of ids
        this.ids = new ArrayList<Integer>();

        // obtain the set of ids (into an array)
        this.getIds();

        // shuffle the array so we access it randomly
        java.util.Collections.shuffle(this.ids, this.random);
    }

    /**
     * Defunct overload of sample because the CPT connector requires a list of parent values.
     * @return always null.
     */
    public List<Integer> sample() {
        return null;
    }

    /**
     * Randomly sample a number of entity ids to connect to based on the parent values.
     * @param val a list of parent values.
     * @return a list of entity ids to connect to.
     */
    public List<Integer> sample(List<Object> val) {

        List<Integer> results = new ArrayList<Integer>();
        Integer num = this.cpt.sample(val);

        int i;

        // grab the desired set size of ids up to the remaining ids
        for (i = 0; i < num && i < this.ids.size(); i++) {
            results.add(this.ids.get(i));
        }

        // do we replace?
        if (this.withReplacement) {
            // simply re-shuffle.  best option to re-use ids we have already sampled?
            java.util.Collections.shuffle(this.ids, random);
        }
        else {
            // remove the first set of ids
            for (;i > 0; i--)
                this.ids.remove(0);
        }

        return results;
    }

    /**
     * Returns a string representation of the CPT connector.
     * @return the string representation.
     */
    public String toString() {
        return cpt.toString();
    }

}