/**
 * $Id: finra-schema.pl 36 2008-04-04 15:29:08Z afast $
 *
 * Part of the open-source AIQUE system
 *   (see LICENSE for copyright and license information).
 *
 */

/* 
 * finra-demo-schema.pl contains the schema predicates for the example finra database.
 */


%Item declaration.
item(exam). %Change this to cycle-exam.
item(firm).
item(rep).

%Variable declaration.
% Look for way to get around duplication problem with associated.
% itemVar(start, X) :- dyn(X).
itemVar(job-sat, rep).
itemVar(risk, rep).
itemVar(fin-status, firm).
itemVar(product, firm).
itemVar(occur, exam).

%Relations among items. For now these encode the relations we need to do temporal analysis.
%Base related is defined to avoid recursive related calls.
baseRelated(firm, exam, one, many).
baseRelated(rep, firm, many, one).

%Temporal Declarations

%Possible base items.
itemExtent(firm, 10000). %Firms last 30 years
itemExtent(rep, 3000). %Reps work for 10 years
itemExtent(exam, 1).

relationFrequency(firm, exam, 1000). %Firms have exams every 3 years.
relationFrequency(rep, firm, 730). %Reps change firms every 2 years.

%Define causes
%tabooList(exists(exam), List) :- possibleCauseList(exists(exam), List, _)
setAsTaboo(exists(exam), _).

causes(exam, []).
causes(job-sat, [fin-status, risk, product, occur]).
causes(risk, [job-sat, fin-status, product, occur]).
causes(fin-status, [product, job-sat, risk, occur]).
causes(product, [fin-status, job-sat, risk, occur]).


% TODO Figure out what the real causes should be. Is the union of BaseEntity causes and DynEntity Causes?
% NB: The following line needs to be copied to every schema file.
causes(StreamVar, CauseList) :- varOf(StreamVar, Stream), stream(_, DynEntity, Stream), causes(DynEntity, CauseList).
