/**
 * $Id$
 *
 * Part of the open-source AIQUE system
 *   (see LICENSE for copyright and license information).
 *
 */

/* 
 * nasd-schema.pl contains the schema predicates for the nasd database.
 */


%Item declaration.
item(branch-stint). % Reps at Branches.
item(firm-stint). % Reps at Firms.
item(branch-affiliation). %Branches at Firms.
item(branch).
item(exam). %Change this to cycle-exam.
item(firm).
item(rep).
item(disclosure).
item(qexam). %Qualifying Exam.

%Variable declaration.
% Look for way to get around duplication problem with associated.
% itemVar(start, X) :- dyn(X).
itemVar(b-start, branch-stint).
itemVar(b-end, branch-stint).
itemVar(f-start, firm-stint).
itemVar(f-end, firm-stint).
itemVar(e-start, exam).
itemVar(e-end, exam).
itemVar(d-type, disclosure).
itemVar(q-type, qexam).
itemVar(ba-start, branch-affiliation).
itemVar(ba-end, branch-affiliation).

%Relations among items. For now these encode the relations we need to do temporal analysis.
%Base related is defined to avoid recursive related calls.
baseRelated(firm, exam, one, many).
baseRelated(branch-stint, branch, many, one).
baseRelated(firm-stint, firm, many, one).
baseRelated(rep, branch-stint, one, many).
baseRelated(rep, firm-stint, one, many).
baseRelated(disclosure, rep, many, one).
baseRelated(qexam, rep, many, one).
baseRelated(branch-affiliation, firm, many, one).
baseRelated(branch, branch-affiliation, one, many).


%Temporal Declarations

%Possible base items.
itemExtent(firm, 10000). %Firms last 30 years
itemExtent(branch, 5000). %Branches last 15 years
itemExtent(rep, 3000). %Reps work for 10 years

relationFrequency(firm,exam, 1000). %Firms have exams every 3 years.
relationFrequency(rep,firm-stint, 730). %Reps change firms every 2 years.
relationFrequency(firm, firm-stint, 10). %Firms have rep changes every 10 days.
relationFrequency(rep,disclosure, 170).


/*streamFrequency(branch-stint, 1). %Periodicity; How often does this change?
streamExtent(branch-stint, 3000 ). % How long does this stream last?
streamCausalDuration(branch-stint, 365). % How long do this effect last?

streamFrequency(firm-stint, 1).
streamExtent(firm-stint, 3000).
streamCausalDuration(firm-stint, 365).

streamFrequency(exam, 365). %Periodicity; How often does this change?
streamExtent(exam, 3000 ). % How long does this stream last?
streamCausalDuration(exam, 90). % How long do this effect last?

streamFrequency(qexam, 365).
streamExtent(qexam, 30).
streamCausalDuration(qexam, 7300).

streamFrequency(disclosure, 31).
streamExtent(disclosure, 1).
streamCausalDuration(disclosure, 730).*/


% These are additional temporal relations that hold for a certain granularity. These may change.
%baseTimeRelated(branch, exam, one, one, 365).
%baseTimeRelated(branch-stint, branch, one, one, 1).

%Define causes
%tabooList(exists(exam), List) :- possibleCauseList(exists(exam), List, _)
setAsTaboo(exists(exam), _).

causes(exam, []).
causes(branch-stint, [b-start, b-end, branch_id, rep-behavior]).
causes(firm-stint, [f-start, f-end, firm_id, rep-behavior]).
causes(disclosure, [fraud, rep-behavior]).

% TODO Figure out what the real causes should be. Is the union of BaseEntity causes and DynEntity Causes?
% NB: The following line needs to be copied to every schema file.
causes(StreamVar, CauseList) :- varOf(StreamVar, Stream), stream(_, DynEntity, Stream), causes(DynEntity, CauseList).
