======================================================================
                                ABOUT AIQ
======================================================================

AIQ (automated identification of quasi-experiments) identifies a
subset of the possible quasi-experiments that can be performed on a
specified data set with the aim of finding causal relationships.
Quasi-experiments exploit fortuitous circumstances in non-experimental
data that enable causal inference, even in the absence of familiar
control and randomization methods.  AIQ automatically identifies
appropriate experimental units and associated variables (possible
causes and effects) and suggests quasi-experimental designs for
evaluation and refinement by a human experimenter.

AIQ 1.0 is a proof-of-concept prototype that looks for examples of a
single quasi-experiment design (the "non-equivalent control group
design").  It has been designed to facilitate specifying a data schema
but not necessarily for easily adding additional quasi-experimental
designs.  AIQ 1.0 contains no error checking and may produce incorrect
results rather than reporting an error if problems are present.  We
expect to continue development of AIQ over the next several years.

AIQ's results take the form of two entity-attribute pairs, one forming
the possible causal variable (the treatment) and the other forming the
possible effect variable (the outcome).  For example, running AIQ on
the example runner schema included with the distribution yields two
experiment designs: one identifies a coach's experience as a possible
cause of a runner's finish position in a race, the second identifies
that experience as a possible cause of a runner's time in a race.
These entity-attribute pairs must obey the relational and temporal
requirements required by the quasi-experimental design.

These sets of entity-attribute pairs suggest variables (treatments and
outcomes) that can be further tested in the context of a
quasi-experiment.  Human experimenters are needed to evaluate and
refine the design (e.g., Do we have other information that rules out
the possible causal relationship?  How should we aggregate attribute
values?  What statistical tests should be run?).  AIQ identifies
patterns in the data schema that, combined with limited domain
knowledge about possible causes, suggest pairs of variables that have
the potential to participate in a causal relationship.  Whether or not
they actually do participate in a causal relationship can only be
determined by actually performing the suggested quasi-experiment
(refining the design and running the appropriate statistical analyses
on the data).

AIQ 1.0 is written in Prolog and runs in the SWI Prolog interpreter.
The current version of AIQ differs slightly from that used to produce
the results shown in "Automatic Identification of Quasi-Experimental
Designs for Discovering Causal Knowledge" (KDD 2008).  These
differences involve minor bug fixes and consolidating different
aggregation functions into a single, generic "agg" operator.  As a
result of this consolidation, running AIQ on the provided schemas may
yield fewer matching designs than shown in the paper's results.

See "Automatic Identification of Quasi-Experimental Designs for
Discovering Causal Knowledge" (Jensen, et al., KDD 2008; available
from http://kdl.cs.umass.edu/papers/index.html) for additional
information on AIQ.

======================================================================
                               INSTALLATION
======================================================================

1. Install SWI Prolog (available from www.swi-prolog.org).
2. Download and uncompress the AIQ software package.

AIQ uncompresses to the following directory structure:
  prolog  - contains the Prolog code that defines the target
            quasi-experimental design and associated utility rules
  schemas - contains the Prolog schemas for a variety of data sets

======================================================================
                              ABOUT THE CODE
======================================================================

AIQ 1.0 consists of three Prolog files:

 - control-group-design.pl - defines the top-level rule used by AIQ, in
     this case, the rule specifying the "control group design"
     quasi-experimental design.
 - core-predicates.pl - defines the helper rules used by AIQ
 - the schema for the target data set

The aiq/schemas directory contains example schemas for several data
sets, including those used for the KDD 2008 paper.  The examples below
are taken from the runner schema (runner-schema.pl), a simple schema
designed to illustrate AIQ usage.

To use AIQ on a new data set you need only define the new data schema.
New quasi-experimental designs can be created by writing new top-level
rules similar to controlGroupDesign.  KDL plans to implement
additional quasi-experimental designs in future versions of AIQ.

======================================================================
                         SPECIFYING A DATA SCHEMA
======================================================================

Creating a data schema requires defining the relevant entities, their
attributes, the relations between entities, and temporal
characteristics of those entities and relationships.  Data schemas
also provide selected domain knowledge in the form of assumptions
regarding the possible causes of specific observations.

The following list illustrates how to define each of these items:

1. Define entities ("things" in the data schema).

   item(runner).
   item(race).

2. Define schema variables (attributes on these entities).  Each
   schema variable must be unique.  For example, if two entities have
   the attribute "age," you must define two distinct schema variables,
   e.g., "parent-age" and "child-age."

   itemVar(age,runner).
   itemVar(finish-position,race).

3. Specify relations between entities.  AIQ currently only supports
   one-to-many and many-to-one relationships, although you can specify
   different relationships in each direction when appropriate.

   baseRelated(runner,race,one,many).  % One runner enters many races

   AIQ automatically defines the "inverse" relation, so, for example,
   you do not need to also specify baseRelated(race,runner,many,one).

4. Specify extents (average duration or age) of entities.  All extents
   must use the same unit of time, which should be the largest
   increment of time that captures the changes of interest.  In the
   example schemas, all extents are measured in days; other increments
   may make more sense in other domains.  To specify a permanent
   entity, make the extent the same as the lifespan of the data (e.g.,
   7300 for data covering a 20 year span).

   itemExtent(runner,3650).  % runners compete for 10 years
   itemExtent(race,1).       % races only exist for one day

   You do not need to specify extents for all entities; however,
   entities without extents are limited in how they participate in
   quasi-experimental designs and omitting extents may reduce the
   number of possible quasi-experiments identified.

5. Specify relation frequencies.  Frequencies indicate how often, on
   average, one entity changes in relation to another entity.  Specify
   frequencies along the one-to-many direction using the same units
   (e.g., days) as for extents.

   relationFrequency(runner,race,60). % runners compete every 2 months

For both extents and frequencies, absolute accuracy is not as
important as the temporal "ordering" of these quantities.  It is more
important to capture whether one event occurs more or less frequently
than another than it is to provide an accurate estimate of average
frequency for either event.

6. Specify assumptions (domain knowledge about possible causes). By
   default, AIQ considers every variable to be a potential cause of
   every other variable.  Use setAsTaboo facts to identify instances
   where you know that one variable cannot cause another.  Use the "_"
   wildcard to indicate that there are no causes within the data
   schema for the variable.

   % weather during training does not affect race results
   setAsTaboo(agg(finish-position),agg(training-weather)).
   % nothing in the schema causes weather (weather is quasi-random)
   setAsTaboo(agg(training-weather),_).        

When conducting experiments for the purpose of making causal
inferences, we are not so much concerned with questions such as
whether coach A's experience is responsible for runner B's improved
performance as we are with questions concerning whether, in general, a
coach's experience affects a runner's performance.  Experiments
therefore consider aggregations of attribute values (average, count,
mode, etc.) rather than specific individual values.  AIQ uses a
generic aggregation indicator (agg) to remind us that the proposed
quasi-experiment will also focus on aggregated values for these
variables and that the choice of aggregation function is left to the
experimenter.

Variables having no cause within the schema are considered
quasi-random variables.  Because AIQ requires ruling out common causes
before proposing a possible quasi-experiment, identifying quasi-random
variables (variables that, by definition, have no common cause with
other variables in the schema) can be especially useful.

======================================================================
                        FIND QUASI-EXPERIMENTS
======================================================================

1. Start SWI prolog.

2. Load the AIQ code into your Prolog interpreter.
     ?- consult(prolog/core-predicates).
     ?- consult(prolog/control-group-design).

3. Load the data schema.
     ?- consult(schemas/runner-schema).

   The runner schema is an example data schema developed to illustrate
   how to specify data schemas and run AIQ; it does not correspond to
   an actual data set.

4. Query for the matching designs.
     ?- controlGroupDesign(CauseItem, EffectItem, CauseVar, EffectVar).
   where
     CauseItem is the entity containing the causal variable
     EffectItem is the entity containing the effect variable
     CauseVar is the variable that measures or describes the causal factor
     EffectVar is the observation variable

Querying for matches to the controlGroupDesign in the runner schema
yields the following results:

     CauseItem = coach,
     EffectItem = race,
     CauseVar = agg(experience),
     EffectVar = agg(finish-position) ;

     CauseItem = coach,
     EffectItem = race,
     CauseVar = agg(experience),
     EffectVar = agg(time) ;
     fail.

When running AIQ interactively in a Prolog interpreter, enter ";" to
obtain the next result.  Prolog responds "fail" when no more matches
are found.

These results show that AIQ has identified two potential
quasi-experimental designs.  The first design tests whether a coach's
(the causal entity) experience (the causal variable) is a cause of the
finish position (the effect variable) of the runner in a race (the
effect entity).  The second design tests whether a coach's experience
is a cause of a runner's time for a race.  Again, experiments
necessarily deal with aggregates of each variable (e.g., average race
time), as indicated by the generic "agg" aggregator.

